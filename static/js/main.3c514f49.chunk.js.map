{"version":3,"sources":["components/GameImage.js","App.js","serviceWorker.js","index.js"],"names":["GameImage","props","react_default","a","createElement","className","shake","images","map","image","src","url","alt","data-clicked","clicked","onClick","handleClick","id","App","state","pictures","score","highScore","_this","find","o","resetGame","goodPick","newPictures","slice","newPictures1","shuffle","console","log","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","pic","components_GameImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c514f49.chunk.js","sourcesContent":["import React from 'react';\n\nfunction GameImage(props) {\n  return (\n    <div className={props.shake ? \"\": \"animated shake\" }>\n      {props.images.map(image => (\n          <img src={image.url} className=\"bird img-thumbnail\" alt={image.alt} data-clicked={image.clicked}  onClick={() => props.handleClick(image.id)} />\n      ))}\n    </div>\n\n  );\n}\n\nexport default GameImage;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport GameImage from \"./components/GameImage\";\nimport \"./styles/Header.css\";\n\nclass App extends Component {\n\n  state = {\n    pictures: [\n      {\n        id: 1,\n        url: \"/assets/img/adler-2386314_640.jpg\",\n        alt: \"bird1\",\n        clicked: false\n      },\n      {\n        id: 2,\n        url: \"/assets/img/animal-1850868_640.jpg\",\n        alt: \"bird2\",\n        clicked: false\n      },\n      {\n        id: 3,\n        url: \"/assets/img/bar-tailed-godwit-944883_640.jpg\",\n        alt: \"bird3\",\n        clicked: false\n      },\n      {\n        id: 4,\n        url: \"/assets/img/blue-jay-3734030_640.jpg\",\n        alt: \"bird4\",\n        clicked: false\n      },\n      {\n        id: 5,\n        url: \"/assets/img/duck-1884934_640.jpg\",\n        alt: \"bird5\",\n        clicked: false\n      },\n      {\n        id: 6,\n        url: \"/assets/img/guacamaya-4132823_640.jpg\",\n        alt: \"bird6\",\n        clicked: false\n      },\n      {\n        id: 7,\n        url: \"/assets/img/mallard-3524213_640.jpg\",\n        alt: \"bird7\",\n        clicked: false\n      },\n      {\n        id: 8,\n        url: \"/assets/img/robin-4225979_640.jpg\",\n        alt: \"bird8\",\n        clicked: false\n      },\n      {\n        id: 9,\n        url: \"/assets/img/spring-bird-2295434_640.jpg\",\n        alt: \"bird9\",\n        clicked: false\n      },\n      {\n        id: 10,\n        url: \"/assets/img/swan-4208564_640.jpg\",\n        alt: \"bird10\",\n        clicked: false\n      },\n      {\n        id: 11,\n        url: \"/assets/img/tit-4228129_640.jpg\",\n        alt: \"bird11\",\n        clicked: false\n      },\n      {\n        id: 12,\n        url: \"/assets/img/tit-4230128_640.jpg\",\n        alt: \"bird12\",\n        clicked: false\n      }\n    ],\n    score: 0,\n    highScore: 0\n  };\n\n\n  // handleClick changes the state of this image\n  handleClick = id => {\n\n    // HLS this doesn't work because we shuffle the location\n    // How do we find the correct picture?\n    // let pic = this.state.pictures[id - 1];\n\n    let pic = this.state.pictures.find(o => o.id === id);\n\n    pic.clicked ? this.resetGame() : this.goodPick(id);\n\n    // shuffle location, Can we simply shuffle the array?\n    // make a copy of the array\n    let newPictures = this.state.pictures.slice();\n    // shuffle the items in the array \n    let newPictures1 = this.shuffle(newPictures);\n    console.log(newPictures1);\n\n    // set state to the new pictures array with the modified value\n    this.setState({ pictures: newPictures1 });\n  };\n\n  // This means we had a successful click\n  goodPick = id => {\n\n    // increase the score\n    this.setState({ score: this.state.score + 1 });\n\n    // make a copy of the array\n    let newPictures = this.state.pictures.slice();\n    let pic = newPictures.find(o => o.id === id);\n    pic.clicked = true;\n\n    // set state to the new pictures array with the modified value\n    this.setState({ pictures: newPictures });\n\n  }\n\n  // Call this method when an image was clicked more than once\n  resetGame() {\n    console.log(\"You already clicked this image\");\n\n    // maybe set a new high score\n    if (this.state.score > this.state.highScore)\n    {\n      this.setState({highScore: this.state.score});\n    }\n    \n    // reset score to 0\n    this.setState({ score: 0 });\n\n\n    // reset all pictures.clicked to false\n    // make a copy of the array\n    let newPictures = this.state.pictures.slice();\n    this.state.pictures.map(pic => (\n      pic.clicked = false\n    ));\n    // modify the picture \n    // set state to the new pictures array with the modified value\n    this.setState({ pictures: newPictures });\n\n  };\n\n  // Fisher-Yates (aka Knuth) Shuffle.\n shuffle = array => {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element... Once element is picked the currentIndex is reduced and so is the range of randomIndex\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"fluid-container intro \">\n          <div className=\"row\">\n            <div className=\"col-md-4 align-self-end\">\n              <h3>Click An Image To Begin</h3>\n            </div>\n            <div className=\"col-md-4 align-self-center\">\n              <h1>Clicky Bird</h1>\n            </div>\n            <div className=\"col-md-4 align-self-end\">\n              <h3>Score: {this.state.score} | Top Score: {this.state.highScore}</h3>\n            </div>\n          </div>\n        </div>\n        <div className=\"fluid-container directions\">\n          <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n        </div>\n\n        <div className=\"fluid-container game\">\n          <GameImage images={this.state.pictures}\n            handleClick={this.handleClick}\n            shake={this.state.score}></GameImage>\n        </div>\n\n        <div className=\"fluid-container footer \">\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}